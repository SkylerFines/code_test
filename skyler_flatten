import unittest


class TempTracker(object):
    """
    Record temperature and calculates the minimum, maximum,
    and mean values of the collected temperatures.
    """

    def __init__(self):
        self.temp_list = []
        self.max = int()
        self.min = 110
        self.mean = int()

    def insert(self, temp):
        """
        Records the new temperature
        Args:
            temp (int): temperature in degrees fahrenheit.
                        Valid temp should be in between 0 - 110
        Returns:
            self.temp_list (list): list of recorded temperatures
        """
        if temp not in range(0, 111):
            print("Invalid Input: {temp}!".format(temp=temp),
                  "Accepted temperatures are from 0 - 110 Fahrenheit")
            return

        self.temp_list.append(temp)
        return self.temp_list

    def get_max(self):
        """
        Return the maximum temperature (int) in self.temp_list
        """
        for num in self.temp_list:
            if num > self.max:
                self.max = num
        return self.max

    def get_min(self):
        """
        Return the minimum temperature (int) in self.temp_list
        """
        for num in self.temp_list:
            if num < self.min:
                self.min = num
        return self.min

    def get_mean(self):
        """
        Returns the average temperature (float) of
        all collected temperatures in self.temp_list
        """
        total_sum = 0.0
        for num in self.temp_list:
            total_sum += num
        self.mean = total_sum/len(self.temp_list)
        return self.mean


class TestTempTracker(unittest.TestCase):
    """ Test for TempTracker class """
    def setUp(self):
        self.tracker = TempTracker()

    def test_insert(self):
        test_temp = 5
        expected_temp_list = [5]
        self.assertEqual(self.tracker.insert(test_temp), expected_temp_list)

    def test_get_max(self):
        self.tracker.temp_list = [1, 2, 3, 4]
        expected_max = 4
        self.assertEqual(self.tracker.get_max(), expected_max)

    def test_get_min(self):
        self.tracker.temp_list = [1, 2, 3, 4]
        expected_min = 1
        self.assertEqual(self.tracker.get_min(), expected_min)

    def test_get_mean(self):
        self.tracker.temp_list = [3, 5, 1, 3]
        expected_mean = 3
        self.assertEqual(self.tracker.get_mean(), expected_mean)


if __name__ == '__main__':
    unittest.main()
